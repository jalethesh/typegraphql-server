# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateCategory {
  avg: CategoryAvgAggregate
  count: CategoryCountAggregate
  max: CategoryMaxAggregate
  min: CategoryMinAggregate
  sum: CategorySumAggregate
}

type AggregateOrder {
  avg: OrderAvgAggregate
  count: OrderCountAggregate
  max: OrderMaxAggregate
  min: OrderMinAggregate
  sum: OrderSumAggregate
}

type AggregateProduct {
  avg: ProductAvgAggregate
  count: ProductCountAggregate
  max: ProductMaxAggregate
  min: ProductMinAggregate
  sum: ProductSumAggregate
}

type AggregateUser {
  avg: UserAvgAggregate
  count: UserCountAggregate
  max: UserMaxAggregate
  min: UserMinAggregate
  sum: UserSumAggregate
}

type Category {
  createdAt: DateTime!
  id: Int!
  name: String!
  products(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  updatedAt: DateTime!
}

type CategoryAvgAggregate {
  id: Float!
}

type CategoryCountAggregate {
  _all: Int!
  createdAt: Int
  id: Int!
  name: Int
  updatedAt: Int
}

input CategoryCreateInput {
  createdAt: DateTime
  name: String!
  products: ProductCreateNestedManyWithoutCategoriesInput
  updatedAt: DateTime
}

input CategoryCreateNestedManyWithoutProductsInput {
  connect: [CategoryWhereUniqueInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutproductsInput!]
  create: [CategoryCreateWithoutProductsInput!]
}

input CategoryCreateOrConnectWithoutproductsInput {
  create: CategoryCreateWithoutProductsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateWithoutProductsInput {
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
}

input CategoryListRelationFilter {
  every: CategoryWhereInput
  none: CategoryWhereInput
  some: CategoryWhereInput
}

type CategoryMaxAggregate {
  createdAt: DateTime
  id: Int!
  name: String
  updatedAt: DateTime
}

type CategoryMinAggregate {
  createdAt: DateTime
  id: Int!
  name: String
  updatedAt: DateTime
}

input CategoryOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

enum CategoryScalarFieldEnum {
  createdAt
  id
  name
  updatedAt
}

input CategoryScalarWhereInput {
  AND: [CategoryScalarWhereInput!]
  NOT: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

type CategorySumAggregate {
  id: Int!
}

input CategoryUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutCategoriesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpdateManyWithWhereWithoutProductsInput {
  data: CategoryUpdateManyMutationInput!
  where: CategoryScalarWhereInput!
}

input CategoryUpdateManyWithoutProductsInput {
  connect: [CategoryWhereUniqueInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutproductsInput!]
  create: [CategoryCreateWithoutProductsInput!]
  delete: [CategoryWhereUniqueInput!]
  deleteMany: [CategoryScalarWhereInput!]
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutProductsInput!]
  updateMany: [CategoryUpdateManyWithWhereWithoutProductsInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutProductsInput!]
}

input CategoryUpdateWithWhereUniqueWithoutProductsInput {
  data: CategoryUpdateWithoutProductsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpdateWithoutProductsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpsertWithWhereUniqueWithoutProductsInput {
  create: CategoryCreateWithoutProductsInput!
  update: CategoryUpdateWithoutProductsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  products: ProductListRelationFilter
  updatedAt: DateTimeFilter
}

input CategoryWhereUniqueInput {
  id: Int
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Mutation {
  createCategory(data: CategoryCreateInput!): Category!
  createOrder(data: OrderCreateInput!): Order!
  createProduct(data: ProductCreateInput!): Product!
  createUser(data: UserCreateInput!): User!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteManyCategory(where: CategoryWhereInput): AffectedRowsOutput!
  deleteManyOrder(where: OrderWhereInput): AffectedRowsOutput!
  deleteManyProduct(where: ProductWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteUser(where: UserWhereUniqueInput!): User
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateManyCategory(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): AffectedRowsOutput!
  updateManyOrder(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): AffectedRowsOutput!
  updateManyProduct(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertCategory(create: CategoryCreateInput!, update: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category!
  upsertOrder(create: OrderCreateInput!, update: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order!
  upsertProduct(create: ProductCreateInput!, update: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Order {
  createdAt: DateTime!
  customer: User
  id: String!
  products(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  updatedAt: DateTime!
  userId: Int
}

type OrderAvgAggregate {
  userId: Float
}

type OrderCountAggregate {
  _all: Int!
  createdAt: Int
  id: Int
  updatedAt: Int
  userId: Int
}

input OrderCreateInput {
  createdAt: DateTime
  customer: UserCreateNestedOneWithoutOrdersInput
  id: String
  products: ProductCreateNestedManyWithoutOrdersInput
  updatedAt: DateTime
}

input OrderCreateNestedManyWithoutCustomerInput {
  connect: [OrderWhereUniqueInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutcustomerInput!]
  create: [OrderCreateWithoutCustomerInput!]
}

input OrderCreateNestedManyWithoutProductsInput {
  connect: [OrderWhereUniqueInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutproductsInput!]
  create: [OrderCreateWithoutProductsInput!]
}

input OrderCreateOrConnectWithoutcustomerInput {
  create: OrderCreateWithoutCustomerInput!
  where: OrderWhereUniqueInput!
}

input OrderCreateOrConnectWithoutproductsInput {
  create: OrderCreateWithoutProductsInput!
  where: OrderWhereUniqueInput!
}

input OrderCreateWithoutCustomerInput {
  createdAt: DateTime
  id: String
  products: ProductCreateNestedManyWithoutOrdersInput
  updatedAt: DateTime
}

input OrderCreateWithoutProductsInput {
  createdAt: DateTime
  customer: UserCreateNestedOneWithoutOrdersInput
  id: String
  updatedAt: DateTime
}

input OrderListRelationFilter {
  every: OrderWhereInput
  none: OrderWhereInput
  some: OrderWhereInput
}

type OrderMaxAggregate {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  userId: Int
}

type OrderMinAggregate {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  userId: Int
}

input OrderOrderByInput {
  createdAt: SortOrder
  customer: UserOrderByInput
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

enum OrderScalarFieldEnum {
  createdAt
  id
  updatedAt
  userId
}

input OrderScalarWhereInput {
  AND: [OrderScalarWhereInput!]
  NOT: [OrderScalarWhereInput!]
  OR: [OrderScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
  userId: IntNullableFilter
}

type OrderSumAggregate {
  userId: Int
}

input OrderUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  customer: UserUpdateOneWithoutOrdersInput
  id: StringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutOrdersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderUpdateManyWithWhereWithoutCustomerInput {
  data: OrderUpdateManyMutationInput!
  where: OrderScalarWhereInput!
}

input OrderUpdateManyWithWhereWithoutProductsInput {
  data: OrderUpdateManyMutationInput!
  where: OrderScalarWhereInput!
}

input OrderUpdateManyWithoutCustomerInput {
  connect: [OrderWhereUniqueInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutcustomerInput!]
  create: [OrderCreateWithoutCustomerInput!]
  delete: [OrderWhereUniqueInput!]
  deleteMany: [OrderScalarWhereInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [OrderUpdateManyWithWhereWithoutCustomerInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutCustomerInput!]
}

input OrderUpdateManyWithoutProductsInput {
  connect: [OrderWhereUniqueInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutproductsInput!]
  create: [OrderCreateWithoutProductsInput!]
  delete: [OrderWhereUniqueInput!]
  deleteMany: [OrderScalarWhereInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutProductsInput!]
  updateMany: [OrderUpdateManyWithWhereWithoutProductsInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutProductsInput!]
}

input OrderUpdateWithWhereUniqueWithoutCustomerInput {
  data: OrderUpdateWithoutCustomerInput!
  where: OrderWhereUniqueInput!
}

input OrderUpdateWithWhereUniqueWithoutProductsInput {
  data: OrderUpdateWithoutProductsInput!
  where: OrderWhereUniqueInput!
}

input OrderUpdateWithoutCustomerInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutOrdersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderUpdateWithoutProductsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  customer: UserUpdateOneWithoutOrdersInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderUpsertWithWhereUniqueWithoutCustomerInput {
  create: OrderCreateWithoutCustomerInput!
  update: OrderUpdateWithoutCustomerInput!
  where: OrderWhereUniqueInput!
}

input OrderUpsertWithWhereUniqueWithoutProductsInput {
  create: OrderCreateWithoutProductsInput!
  update: OrderUpdateWithoutProductsInput!
  where: OrderWhereUniqueInput!
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  createdAt: DateTimeFilter
  customer: UserRelationFilter
  id: StringFilter
  products: ProductListRelationFilter
  updatedAt: DateTimeFilter
  userId: IntNullableFilter
}

input OrderWhereUniqueInput {
  id: String
}

type Product {
  categories(cursor: CategoryWhereUniqueInput, distinct: [CategoryScalarFieldEnum!], orderBy: [CategoryOrderByInput!], skip: Int, take: Int, where: CategoryWhereInput): [Category!]!
  createdAt: DateTime!
  description: String
  id: String!
  name: String!
  orders(cursor: OrderWhereUniqueInput, distinct: [OrderScalarFieldEnum!], orderBy: [OrderOrderByInput!], skip: Int, take: Int, where: OrderWhereInput): [Order!]!
  quantity: Int!
  sku: String!
  updatedAt: DateTime!
}

type ProductAvgAggregate {
  quantity: Float!
}

type ProductCountAggregate {
  _all: Int!
  createdAt: Int
  description: Int
  id: Int
  name: Int
  quantity: Int!
  sku: Int
  updatedAt: Int
}

input ProductCreateInput {
  categories: CategoryCreateNestedManyWithoutProductsInput
  createdAt: DateTime
  description: String
  id: String
  name: String!
  orders: OrderCreateNestedManyWithoutProductsInput
  quantity: Int!
  sku: String!
  updatedAt: DateTime
}

input ProductCreateNestedManyWithoutCategoriesInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutcategoriesInput!]
  create: [ProductCreateWithoutCategoriesInput!]
}

input ProductCreateNestedManyWithoutOrdersInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutordersInput!]
  create: [ProductCreateWithoutOrdersInput!]
}

input ProductCreateOrConnectWithoutcategoriesInput {
  create: ProductCreateWithoutCategoriesInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutordersInput {
  create: ProductCreateWithoutOrdersInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateWithoutCategoriesInput {
  createdAt: DateTime
  description: String
  id: String
  name: String!
  orders: OrderCreateNestedManyWithoutProductsInput
  quantity: Int!
  sku: String!
  updatedAt: DateTime
}

input ProductCreateWithoutOrdersInput {
  categories: CategoryCreateNestedManyWithoutProductsInput
  createdAt: DateTime
  description: String
  id: String
  name: String!
  quantity: Int!
  sku: String!
  updatedAt: DateTime
}

input ProductListRelationFilter {
  every: ProductWhereInput
  none: ProductWhereInput
  some: ProductWhereInput
}

type ProductMaxAggregate {
  createdAt: DateTime
  description: String
  id: String
  name: String
  quantity: Int!
  sku: String
  updatedAt: DateTime
}

type ProductMinAggregate {
  createdAt: DateTime
  description: String
  id: String
  name: String
  quantity: Int!
  sku: String
  updatedAt: DateTime
}

input ProductOrderByInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  quantity: SortOrder
  sku: SortOrder
  updatedAt: SortOrder
}

enum ProductScalarFieldEnum {
  createdAt
  description
  id
  name
  quantity
  sku
  updatedAt
}

input ProductScalarWhereInput {
  AND: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  name: StringFilter
  quantity: IntFilter
  sku: StringFilter
  updatedAt: DateTimeFilter
}

type ProductSumAggregate {
  quantity: Int!
}

input ProductUpdateInput {
  categories: CategoryUpdateManyWithoutProductsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutProductsInput
  quantity: IntFieldUpdateOperationsInput
  sku: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProductUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  sku: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProductUpdateManyWithWhereWithoutCategoriesInput {
  data: ProductUpdateManyMutationInput!
  where: ProductScalarWhereInput!
}

input ProductUpdateManyWithWhereWithoutOrdersInput {
  data: ProductUpdateManyMutationInput!
  where: ProductScalarWhereInput!
}

input ProductUpdateManyWithoutCategoriesInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutcategoriesInput!]
  create: [ProductCreateWithoutCategoriesInput!]
  delete: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCategoriesInput!]
  updateMany: [ProductUpdateManyWithWhereWithoutCategoriesInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCategoriesInput!]
}

input ProductUpdateManyWithoutOrdersInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutordersInput!]
  create: [ProductCreateWithoutOrdersInput!]
  delete: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutOrdersInput!]
  updateMany: [ProductUpdateManyWithWhereWithoutOrdersInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutOrdersInput!]
}

input ProductUpdateWithWhereUniqueWithoutCategoriesInput {
  data: ProductUpdateWithoutCategoriesInput!
  where: ProductWhereUniqueInput!
}

input ProductUpdateWithWhereUniqueWithoutOrdersInput {
  data: ProductUpdateWithoutOrdersInput!
  where: ProductWhereUniqueInput!
}

input ProductUpdateWithoutCategoriesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutProductsInput
  quantity: IntFieldUpdateOperationsInput
  sku: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProductUpdateWithoutOrdersInput {
  categories: CategoryUpdateManyWithoutProductsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  sku: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProductUpsertWithWhereUniqueWithoutCategoriesInput {
  create: ProductCreateWithoutCategoriesInput!
  update: ProductUpdateWithoutCategoriesInput!
  where: ProductWhereUniqueInput!
}

input ProductUpsertWithWhereUniqueWithoutOrdersInput {
  create: ProductCreateWithoutOrdersInput!
  update: ProductUpdateWithoutOrdersInput!
  where: ProductWhereUniqueInput!
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  categories: CategoryListRelationFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  name: StringFilter
  orders: OrderListRelationFilter
  quantity: IntFilter
  sku: StringFilter
  updatedAt: DateTimeFilter
}

input ProductWhereUniqueInput {
  id: String
  sku: String
}

type Query {
  aggregateCategory(cursor: CategoryWhereUniqueInput, orderBy: [CategoryOrderByInput!], skip: Int, take: Int, where: CategoryWhereInput): AggregateCategory!
  aggregateOrder(cursor: OrderWhereUniqueInput, orderBy: [OrderOrderByInput!], skip: Int, take: Int, where: OrderWhereInput): AggregateOrder!
  aggregateProduct(cursor: ProductWhereUniqueInput, orderBy: [ProductOrderByInput!], skip: Int, take: Int, where: ProductWhereInput): AggregateProduct!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  categories(cursor: CategoryWhereUniqueInput, distinct: [CategoryScalarFieldEnum!], orderBy: [CategoryOrderByInput!], skip: Int, take: Int, where: CategoryWhereInput): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  findFirstCategory(cursor: CategoryWhereUniqueInput, distinct: [CategoryScalarFieldEnum!], orderBy: [CategoryOrderByInput!], skip: Int, take: Int, where: CategoryWhereInput): Category
  findFirstOrder(cursor: OrderWhereUniqueInput, distinct: [OrderScalarFieldEnum!], orderBy: [OrderOrderByInput!], skip: Int, take: Int, where: OrderWhereInput): Order
  findFirstProduct(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByInput!], skip: Int, take: Int, where: ProductWhereInput): Product
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): User
  order(where: OrderWhereUniqueInput!): Order
  orders(cursor: OrderWhereUniqueInput, distinct: [OrderScalarFieldEnum!], orderBy: [OrderOrderByInput!], skip: Int, take: Int, where: OrderWhereInput): [Order!]!
  product(where: ProductWhereUniqueInput!): Product
  products(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  address: String
  createdAt: DateTime!
  email: String!
  firstName: String
  id: Int!
  lastName: String
  orders(cursor: OrderWhereUniqueInput, distinct: [OrderScalarFieldEnum!], orderBy: [OrderOrderByInput!], skip: Int, take: Int, where: OrderWhereInput): [Order!]!
  updatedAt: DateTime!
}

type UserAvgAggregate {
  id: Float!
}

type UserCountAggregate {
  _all: Int!
  address: Int
  createdAt: Int
  email: Int
  firstName: Int
  id: Int!
  lastName: Int
  updatedAt: Int
}

input UserCreateInput {
  address: String
  createdAt: DateTime
  email: String!
  firstName: String
  lastName: String
  orders: OrderCreateNestedManyWithoutCustomerInput
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutOrdersInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutordersInput
  create: UserCreateWithoutOrdersInput
}

input UserCreateOrConnectWithoutordersInput {
  create: UserCreateWithoutOrdersInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutOrdersInput {
  address: String
  createdAt: DateTime
  email: String!
  firstName: String
  lastName: String
  updatedAt: DateTime
}

type UserMaxAggregate {
  address: String
  createdAt: DateTime
  email: String
  firstName: String
  id: Int!
  lastName: String
  updatedAt: DateTime
}

type UserMinAggregate {
  address: String
  createdAt: DateTime
  email: String
  firstName: String
  id: Int!
  lastName: String
  updatedAt: DateTime
}

input UserOrderByInput {
  address: SortOrder
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  updatedAt: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  address
  createdAt
  email
  firstName
  id
  lastName
  updatedAt
}

type UserSumAggregate {
  id: Int!
}

input UserUpdateInput {
  address: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutCustomerInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  address: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneWithoutOrdersInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutordersInput
  create: UserCreateWithoutOrdersInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutOrdersInput
  upsert: UserUpsertWithoutOrdersInput
}

input UserUpdateWithoutOrdersInput {
  address: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput!
  update: UserUpdateWithoutOrdersInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  address: StringNullableFilter
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringNullableFilter
  id: IntFilter
  lastName: StringNullableFilter
  orders: OrderListRelationFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
